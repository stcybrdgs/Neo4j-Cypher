-- CYPHER 
-- example scripts

##########################################
SCRIPTS TO SETUP BETA DATA MODEL FOR IESA GOLD DATA IN NEO4J 

:schema
REM: YOU CAN LOOK AT THE SCHEMA WITH INDEXES AND CONSTRAINTS VIA :schema

// view the current model
MATCH (n) RETURN n LIMIT 25

// delete the current model
MATCH (c) DETACH DELETE c
##########################################
You can add Unique Constraints:
CREATE CONSTRAINT ON (p:Product) ASSERT p.wrWxId IS UNIQUE;

##########################################
USE CSV IMPORT TO LOAD AND REVIEW DATA BEFORE TURNING IT INTO GRAPH DATABASE

https://neo4j.com/developer/desktop-csv-import/

There are several tools available in Neo4j for importing data, but one common tool is LoadCSV
Neo4J will assume the csv that you want to import is in the import folder 
(for iesa gold, the folder is at:
C:\Users\Owner\.Neo4jDesktop\neo4jDatabases\database-4fa252b7-eade-4a2f-8896-c212befeed65\installation-3.5.2\import
)
LOAD CSV WITH HEADERS FROM "file:///bearings_gold_data.csv" AS row
RETURN row LIMIT 5

FIRST STEP: LOAD THE CSV DATA
LOOK AT IT AND SEE IF IT LOOKS GOOD, IF SO GO ON TO SECOND STEP
// get around transactional state with USING PERIODIC COMMIT when importing data sets
///USING PERIODIC COMMIT 2000 
LOAD CSV WITH HEADERS FROM "file:///bearings_gold_data.csv" AS row
FIELDTERMINATOR '|'
RETURN row LIMIT 5

OR

//WrWx_ID|Material|Plant|Manuf|Product_Description|Manufacturer_Material_ID|Category|Product_Type|Product_Attributes
//CREATE INDEX ON :Category(catName);
//CREATE INDEX ON :Product(prodDescription);
LOAD CSV WITH HEADERS FROM "file:///bearings_gold_data.csv" AS goldcsv
//WHERE goldcsv.Product_Description IS not NULL
FIELDTERMINATOR '|'
WITH 
goldcsv.WrWx_ID AS wrWxId,
goldcsv.Material AS iesaMaterialId,
goldcsv.Plant as plant,
goldcsv.Manuf AS manufacturer,
goldcsv.Product_Description AS prodDescription,
goldcsv.Manufacturer_Material_ID AS manufacturerId,
goldcsv.Category AS catName,
goldcsv.Product_Type AS prodType,
goldcsv.Product_Attributes AS prodAttributes
RETURN wrWxId, prodDescription, manufacturer, manufacturerId LIMIT 5

USING INDEXES AND CONSTRAINTS
One final thing we need to think about before we create data in the graph is ensuring values are unique and performance is efficient. To handle this, we can use constraints. Just as with other databases, constraints ensure data integrity criteria is not violated, while simultaneously indexing the property with the constraint for faster query performance.
CREATE CONSTRAINT ON (p:Product) ASSERT p.wrWxId IS UNIQUE;

// NEO4J IS SCHEMA OPTIONAL, but sometimes you'll want constraints to ensure data integrity

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
LOAD GOLD DATA INTO NEO4J FROM CSV USING NEO4J BROWSER

STEP TEST: USE CYPHER TO PUT LOADED CSV DATA INTO A GRAPH DB
// We will use MERGE statements to check if the data exists before inserting it into our graph db. Using MERGE can have some performance overhead, but often it is the better approach to maintain high data integrity. To run the Cypher, we tack it onto our previous import query, creating nodes for one type of node at a time, in this case starting with Products:

// prep: rem if records have null values where neo expects a relationship end point, then the record will still be created as a node but
// will be isolated from the graph tree 

// query 1: create the constraints
CREATE CONSTRAINT ON (p:Product) ASSERT p.prodDescription IS UNIQUE;

// query 2: 
// create the nodes
LOAD CSV WITH HEADERS FROM "file:///bearings_gold_data.csv" AS goldcsv
FIELDTERMINATOR '|'
WITH goldcsv
WHERE goldcsv.Product_Description IS NOT NULL
MERGE(p:Product {catName: goldcsv.Category, prodDescription: goldcsv.Product_Description, type: goldcsv.Product_Type, manufacturer: goldcsv.Manuf, manufacturerId: goldcsv.Manufacturer_Material_ID, iesaMaterialId: goldcsv.Material, wrWxId: goldcsv.WrWx_ID})
WITH goldcsv
WHERE goldcsv.Category IS NOT NULL
MERGE(c:Category {catName: goldcsv.Category})
WITH goldcsv
//WHERE goldcsv.Product_Attributes IS NOT NULL
MERGE(a:Attributes {prodDescription: goldcsv.Product_Description, attributes: goldcsv.Product_Attributes})
// create category to product relationships (rem row by row as csv loads)
WITH goldcsv
MATCH 
(ca:Category {catName: goldcsv.Category}),
(pr:Product {prodDescription: goldcsv.Product_Description, type: goldcsv.Product_Type, manufacturer: goldcsv.Manuf, manufacturerId: goldcsv.Manufacturer_Material_ID, iesaMaterialId: goldcsv.Material, wrWxId: goldcsv.WrWx_ID}),
(at:Attributes {prodDescription: goldcsv.Product_Description, attributes: goldcsv.Product_Attributes})
CREATE 
(ca)-[:HAS_PRODUCT]->(pr),
(pr)-[:HAS_ATTRIBUTES]->(at);


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
PORTING THE GRAPH DB QUERY INTO PYTHON WITH THE NEO4J DRIVER
// (first create a blank database using neo4j desktop and start it from mgmt console)
// Q: how do you create a new blank db and start the server from python?

// first, load constraint into the db
from neo4j import GraphDatabase
driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'devpass'))
with driver.session() as session:
    session.run('CREATE CONSTRAINT ON (p:Product) ASSERT p.prodDescription IS UNIQUE;')


// next, load data from csv
create_gold_query = '''
LOAD CSV WITH HEADERS FROM "file:///bearings_gold_data.csv" AS goldcsv
FIELDTERMINATOR '|'
WITH goldcsv
WHERE goldcsv.Product_Description IS NOT NULL
MERGE(p:Product {catName: goldcsv.Category, prodDescription: goldcsv.Product_Description, type: goldcsv.Product_Type, manufacturer: goldcsv.Manuf, manufacturerId: goldcsv.Manufacturer_Material_ID, iesaMaterialId: goldcsv.Material, wrWxId: goldcsv.WrWx_ID})
WITH goldcsv
WHERE goldcsv.Category IS NOT NULL
MERGE(c:Category {catName: goldcsv.Category})
WITH goldcsv
//WHERE goldcsv.Product_Attributes IS NOT NULL
MERGE(a:Attributes {prodDescription: goldcsv.Product_Description, attributes: goldcsv.Product_Attributes})
// create category to product relationships (rem row by row as csv loads)
WITH goldcsv
MATCH 
(ca:Category {catName: goldcsv.Category}),
(pr:Product {prodDescription: goldcsv.Product_Description, type: goldcsv.Product_Type, manufacturer: goldcsv.Manuf, manufacturerId: goldcsv.Manufacturer_Material_ID, iesaMaterialId: goldcsv.Material, wrWxId: goldcsv.WrWx_ID}),
(at:Attributes {prodDescription: goldcsv.Product_Description, attributes: goldcsv.Product_Attributes})
CREATE 
(ca)-[:HAS_PRODUCT]->(pr),
(pr)-[:HAS_ATTRIBUTES]->(at);
'''


with driver.session() as session:
    result = session.run(create_gold_query)

// example of querying neo4j from within python
with driver.session() as session:
    result = session.run('MATCH (n) RETURN COUNT(n) AS num')
for record in result:
    print(record)


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

EXAMPLES OF QUERYING GOLD DATA FOR PRODUCTS WITHIN NEO4J BROWSER

// find all take-up units that have 60 and 130 as values in the attribute description:
MATCH(p:Product)-[:HAS_ATTRIBUTES]->(a:Attributes) 
WHERE p.manufacturer = "SKF" 
AND  p.catName = "Unit"
AND p.type CONTAINS  "take-up"
AND a.attributes CONTAINS "60" and a.attributes CONTAINS "130"
RETURN a.prodDescription, a.attributes

// find product based on manuf, partial type, and partial attrs
MATCH (p:Product)-[:HAS_ATTRIBUTES]->(a:Attributes)
WHERE p.manufacturer = "SKF" 
AND p.type CONTAINS "Needle roller"
AND a.attributes CONTAINS "20"
AND a.attributes CONTAINS "24"
RETURN p.catName, p.manufacturer, p.manufacturerId, p.prodDescription, p.type, a.attributes


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////




##########################################
Neo4J Browser is a query work bench for executing Cypher queries and working with the results.

The first step with any import task is to define the data model that will be used to represent the data.

CYPHER has a built in LOAD CSV function that defines how a csv file should be mapped to a graph model.
You can use a graph modeling tool called Arrows to design your model.

!! CYPHER REFCARD: neo4j.com/docs/cypher-refcard/

NULL IS NOT NULL
null represents missing or undefined values; if you don't need to store a value in a property, you just don't provide one, there is no need to store a null value

REGULAR EXPRESSIONS =~
MATCH (a:Actor) -[r:ACTED_IN]->(m:Movie)
WHERE p.name =~ "K.+" OR m.released > 2000
RETURN p,r,m

Remember that Neo4j is extensible, so you can write your own user-defined aggregation functions:
neo4j.com/docs/ 

For functions already written by active Neo4j developers, check out the APOC library:
neo4j-contrib.github.io/neo4j-apoc-procedures/

Case sensitive:	Node Labels, Relationship Types, Property Keys
Case Insensitive:	Cypher Keywords (ie, Match, RETURn, etc)

Graph databases are generally built for use with online transaction processing (OLTP) systems. Accordingly, they are normally optimized for transactional performance, and engineered with transactional integrity and operational availability in mind.

CREATE ( :Person {name:"Ann"} ) -[:LOVES]-> ( :Person {name:"Dan"} )  # cares about direction
MATCH ( :Person {name:"Ann"} ) -[:LOVES]-> ( :Person {name:"Dan"} )  # cares about direction
MATCH ( :Person {name:"Ann"} ) -[:LOVES]- ( :Person {name:"Dan"} )  # does not care about direction
MATCH ( :Person {name:"Ann"} ) -[:LOVES]-> (op :Person )  RETURN op  # cares about direction
MATCH (:Person {name:"Ann"}) -[:DRIVES]->(c:Car) RETURN c
    (same as writing it this way):
    MATCH (a:Person) -[:DRIVES]->(c:Car) WHERE a.name = "Ann" RETURN c

In the next query, we look for a car driven by Ann, but before we return the result, we set the brand and model in the db:
MATCH (a:Person) -[:DRIVES]->(c:Car) 
WHERE a.name = "Ann" 
SET c.brand="Volvo", c.model="V70"
RETURN c

Another method for the above query:
MATCH (a:Person) -[:DRIVES]->(c:Car) 
WHERE a.name = "Ann" 
SET c += {brand:"Volvo", model:"V70"}
RETURN c

ENSURING UNIQUENESS IN YOUR GRAPH DATABASE:
here, ensure there can only be one!
CREATE CONSTRAINT ON (p:Person) 
ASSERT p.name IS UNIQUE

with the above statement having been run, you will then get an error if you try to do this:
CREATE (:Person {name:"Ann"})

If you want Ann to have a pet dog, but she is already in the db and there is a uniqueness constraint, then you can merge, which means Ann will be used if she already exists but she will be created if she does not:
MERGE (a:Person {name:"Ann"})
CREATE (a)-[:HAS_PET]->(:Dog{name:"Sam"})

In this pattern, you will look for Ann, and if she does not exist, then you will create her when the twitter handle is created, and then afterwards you will tie her to pet Sam if the exact pattern exists (where ann has a pet dog named sam), but if the pattern does not exist, you will create it:
MERGE (a:Person {name:"Ann"})
ON CREATE SET a.twitter = "@ann"
MERGE (a) -[:HAS_PET]-> (:Dog {name:"Sam"})

CYPHER FILTERING

CYPHER AGGREGATES
For aggregates in Cypher, you don't need to specify a grouping key because it is implied in the RETURN statement:
// implicitly groups by p.name
MATCH (p:Person) -[:ACTED_IN]-> (m:Movie)
RETURN p.name, count(*) AS numberOfMovies

CYPHER SYNTAX



For the following query, you are asking for specific attributes to be returned, so you will get tabular results:
MATCH (p:Actor {name:"Tom Hanks"}) -[r:ACTED_IN|DIRECTED]-(m:Movie)
RETURN p.name, type(r), m.title;
 
However, for the following query, you are not asking for specific attributes to be returned, so you will get graph results:
MATCH (p:Actor {name:"Tom Hanks"}) -[r:ACTED_IN|DIRECTED]-(m:Movie)
RETURN p, r, m



Neo 4J uses csv files as the format for loading data into a Neo 4J db.
You can do it from within a programming language by using the language drivers for Neo 4J, or you can do it from the command line. In either case, you can CREATE millions of nodes in the db each second.

Neo 4J is not an analytics database, but an ACID compliant transactional database, so the visualizer is really for developers who need to determine how to construct the right queries for app development. The queries in your code will be querying Neo 4J servers via Neo 4J APIs.

# cypher query to find a person who drives his/her loved one's car:
MATCH    (p1:Person) -[:DRIVES]->(c:Car) -[:OWNED_BY]-> (p2:Person) <-[:LOVES]- (p1)
RETURN  p1

ASCII ART FOR NODES:
Nodes are surrounded by ()
Labels start with : and group nodes by roles or types --  ( p:Person:Mammal )
Nodes can have properties    (p:Person {name: "Veronica"})

ASCII ART FOR RELATIONSHIPS:
Relationships are wrapped with hyphens or square brackets:  -->  or -[h:HIRED]->
The direction of the relationship is specified with < >: (p1)-[:HIRED]->(p2)
Relationships have properties, also :    -[:HIRED {type: "Fulltime"}]->





MATCH (theater:Venue {name:'Theatre Royal'}),
(newcastle:City {name:'Newcastle'}),
(bard:Author {lastname:'Shakespeare'}),
(newcastle)<-[:STREET|CITY*1..2]-(theater)
<-[:VENUE]-()-[:PERFORMANCE_OF]->()
-[:PRODUCTION_OF]->(play)<-[w:WROTE_PLAY]-(bard)
WHERE w.year > 1608
RETURN DISTINCT play.title AS play

MATCH (theater:Venue {name:'Theatre Royal'}),
(newcastle:City {name:'Newcastle'}),
(bard:Author {lastname:'Shakespeare'}),
(newcastle)<-[:STREET|CITY*1..2]-(theater)
<-[:VENUE]-()-[p:PERFORMANCE_OF]->()
-[:PRODUCTION_OF]->(play)<-[:WROTE_PLAY]-(bard)
RETURN play.title AS play, count(p) AS performance_count
ORDER BY performance_count DESC

-- uses the collect function to produce a comma delimited list
MATCH (bard:Author {lastname:'Shakespeare'})-[w:WROTE_PLAY]->(play)
WITH play
ORDER BY w.year DESC
RETURN collect(play.title) AS plays

-- create graph db to track email interactions
CREATE (alice:User {username:'Alice'}),
(bob:User {username:'Bob'}),
(charlie:User {username:'Charlie'}),
(davina:User {username:'Davina'}),
(edward:User {username:'Edward'}),
(alice)-[:ALIAS_OF]->(bob)

-- add some relationships joining users through email threads
MATCH (bob:User {username:'Bob'}),
(charlie:User {username:'Charlie'}),
(davina:User {username:'Davina'}),
(edward:User {username:'Edward'})
CREATE (bob)-[:EMAILED]->(charlie),
(bob)-[:CC]->(davina),
(bob)-[:BCC]->(edward)

-- create a more detailed structure to place email at 
-- center of graph of relationships
CREATE (email_1:Email {id:'1', content:'Hi Charlie, ... Kind regards, Bob'}),
(bob)-[:SENT]->(email_1),
(email_1)-[:TO]->(charlie),
(email_1)-[:CC]->(davina),
(email_1)-[:CC]->(alice),
(email_1)-[:BCC]->(edward)


-- /////////////////////////////////////
-- create a new node in neo4j
CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 })
CREATE (ee:Person { name: "Joe", from: "Asia", klout: 99 })

-- find the nodes
MATCH (ee:Person) WHERE ee.name = "Emil" RETURN ee;
MATCH (ee:Person) WHERE ee.klout = 99 RETURN ee;

-- MATCH clause to specify a pattern of nodes and relationships
-- (ee:Person) a single node pattern with label 'Person' which 
-- will assign matches to the variable 'ee'
-- WHERE clause to constrain the results
-- ee.name = "Emil" compares name property to the value "Emil"
-- RETURN clause used to request particular results

-- you can use the CREATE clause to create many nodes and 
-- relationships at once, ie:
CREATE 
-- nodes...
(js:Person { name: "Johan", from: "Sweden", learn: "surfing" }),
(ir:Person { name: "Ian", from: "England", title: "author" }),
(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),
(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),
-- relationships...
(ee)-[:KNOWS {since: 2001}]->(js),
(ee)-[:KNOWS {rating: 5}]->(ir),
(js)-[:KNOWS]->(ir),
(js)-[:KNOWS]->(rvb),
(ir)-[:KNOWS]->(js),
(ir)-[:KNOWS]->(ally),
(rvb)-[:KNOWS]->(ally)


-- use recommendation pattern to find someone who knows how to surf
MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

-- Understand how a query works by prepending EXPLAIN or PROFILE:
-- (Neo4j lets you analyze how your query works via the dashboard's visual query plan)
PROFILE MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer


-- /////////////////////////////////////
-- Exploring the Movie database in Neo4j
-- pull back movies from Movie db where movie was made between 1995 and 2000
MATCH(n90s:Movie) 
WHERE n90s.released >= 1995 AND n90s.released < 2000 
RETURN n90s.title

-- find out when Halle Berry was born
MATCH(bd:Person) 
WHERE bd.name = "Halle Berry" 
RETURN bd.born

-- show all of the movies in the db that Tom Hanks acted in
MATCH(tom{name:"Tom Hanks"}) -[:ACTED_IN]-> (tomsMovies) 
RETURN tom, tomsMovies

-- who directed "Cloud Atlas"?
MATCH (director)-[:DIRECTED]->(movie) 
WHERE movie.title = "Cloud Atlas"  
RETURN movie, director

-- who are Tom Hanks' co-actors?
MATCH (tom{name:"Tom Hanks"})-[:ACTED_IN]->(movies)<-[:ACTED_IN]-(coActors) 
RETURN coActors.name

-- who is associated with Cloud Atlas? How are they related to this Movie?
MATCH(actor:Person)-[relationship]-(ca:Movie{title:"Cloud Atlas"}) 
RETURN ca, actor, Type(relationship)

-- ibid v2 (same query but constrained in WHERE clause instead of Movie object)
MATCH(ca)-[howRelated]-(people) 
WHERE ca.title="Cloud Atlas" 
RETURN ca, people, howRelated

-- show me all movies and people 6 degrees or less removed from Kevin Bacon
MATCH(kb:Person{name:"Kevin Bacon"})-[*1..6]-(everything) 
RETURN everything.name, everything.title

-- use shortestPath() to return all items in the shortest path between Meg Ryan and Kevin Bacon
MATCH path=shortestPath((kb:Person{name:"Kevin Bacon"})-[*]-(mr:Person{name:"Meg Ryan"})) 
RETURN path

-- find coActors that Tom Hanks has not worked with
MATCH(th:Person{name:"Tom Hanks"})-[:ACTED_IN]->(movie)<-[:ACTED_IN]-(coActor), 
     (coActor)-[:ACTED_IN]->(movie2)<-[:ACTED_IN]-(cocoActor) 
WHERE NOT (th)-[:ACTED_IN]->()<-[:ACTED_IN]-(cocoActor) 
AND th <> cocoActor 
RETURN cocoActor.name AS Recommend, 
COUNT(*) AS Strength 
ORDER BY Strength DESC

-- find someone to introduce Tom Hanks to Tom Cruise
MATCH(th:Person{name:"Tom Hanks"})-[:ACTED_IN]->(m1)<-[:ACTED_IN]-(coActor), 
(tc:Person{name:"Tom Cruise"})-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(coActor) 
RETURN DISTINCT coActor

-- remove your movie db !
MATCH (n) DETACH DELETE n